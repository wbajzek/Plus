/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

struct Partial
{
    double cyclesPerSecond;
    float level;
};

double freq = 110.0;
const int numPartials = 8;
double partialLevels[numPartials] = { 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };
double currentAngles[numPartials] = { 0.0 };

//==============================================================================
PlusAudioProcessor::PlusAudioProcessor()
{
}

PlusAudioProcessor::~PlusAudioProcessor()
{
}

//==============================================================================
const String PlusAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int PlusAudioProcessor::getNumParameters()
{
    return 0;
}

float PlusAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void PlusAudioProcessor::setParameter (int index, float newValue)
{
}

const String PlusAudioProcessor::getParameterName (int index)
{
    return String();
}

const String PlusAudioProcessor::getParameterText (int index)
{
    return String();
}

const String PlusAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PlusAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PlusAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool PlusAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool PlusAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PlusAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PlusAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PlusAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PlusAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PlusAudioProcessor::getCurrentProgram()
{
    return 0;
}

void PlusAudioProcessor::setCurrentProgram (int index)
{
}

const String PlusAudioProcessor::getProgramName (int index)
{
    return String();
}

void PlusAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void PlusAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
}

void PlusAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void PlusAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    for (int i = 0; i < numPartials; i++)
    {
        const double cyclesPerSample = (freq * (float)(i+1)) / getSampleRate();
        const double angleDelta = cyclesPerSample * 2.0 * double_Pi;
        int startSample = 0;
        int numSamples = buffer.getNumSamples();
        
        if (angleDelta != 0.0)
        {

            while (--numSamples >= 0)
            {
                const float currentSample = (float) ((sin (currentAngles[i]) * partialLevels[i]) / 8.0);
                
                for (int channelNum = buffer.getNumChannels(); --channelNum >= 0;)
                    buffer.addSample(channelNum, startSample, currentSample);
                
                currentAngles[i] += angleDelta;
                
                ++startSample;
            }
        }
    }
}

//==============================================================================
bool PlusAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PlusAudioProcessor::createEditor()
{
    return new PlusAudioProcessorEditor (*this);
}

//==============================================================================
void PlusAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void PlusAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PlusAudioProcessor();
}

